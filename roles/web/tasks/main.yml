---

- name: Packages
  ansible.builtin.apt:
      pkg:
          - git
          - python3-venv

- name: Nginx
  notify:
      - restart dictionary nginx service
  ansible.builtin.template:
      src: nginx.conf
      dest: "/etc/nginx/conf.d/{{ dictionary_domain }}.conf"
      mode: "0644"


# Django.

- name: Deployment directory
  ansible.builtin.file:
      path: /opt/dictionary
      state: directory
      owner: root
      group: root
      mode: "0755"

- name: Web directory
  ansible.builtin.file:
      path: /opt/dictionary/web
      state: directory
      owner: peter
      group: peter
      mode: "0700"

- name: Repo
  notify:
      - restart dictionary service
  become: true
  become_user: peter
  ansible.builtin.git:
      repo: "{{ dictionary_web_repo }}"
      dest: /opt/dictionary/web
      version: "{{ dictionary_web_version }}"
      force: true
  register: dict_clone
  # Clean
  # Upgrade
  # Sync
  # Migrate

- name: Clean
  ansible.builtin.file:
      path: /opt/dictionary/static
      state: absent
  when: dict_clone is changed  # noqa: no-handler

- name: Stat static
  ansible.builtin.stat:
      path: /opt/dictionary/static
  register: dict_static
  # Static

- name: Static
  ansible.builtin.copy:
      src: /opt/dictionary/web/static
      dest: /opt/dictionary
      remote_src: true
      owner: www-data
      group: www-data
      mode: "0700"
  when: not dict_static.stat.exists

- name: Settings
  notify:
      - restart dictionary service
  become: true
  become_user: peter
  ansible.builtin.template:
      src: settings.py
      dest: /opt/dictionary/web/var/settings.py
      mode: "0644"


# Venv

- name: Venv
  notify:
      - restart dictionary service
  become: true
  become_user: peter
  ansible.builtin.command:
      cmd: python3 -m venv venv
  args:
      chdir: /opt/dictionary/web/var
      creates: /opt/dictionary/web/var/venv
  register: dict_venv
  # Upgrade
  # Sync

- name: Upgrade
  become: true
  become_user: peter
  ansible.builtin.command:
      cmd: /opt/dictionary/web/var/venv/bin/pip install --upgrade pip \
        setuptools wheel pip-tools
  when: dict_clone is changed or dict_venv is changed
  register: dict_upgrade
  changed_when: '"Successfully installed" not in dict_upgrade.stdout'

- name: Sync
  become: true
  become_user: peter
  ansible.builtin.command:
      cmd: /opt/dictionary/web/var/venv/bin/pip-sync requirements.txt
  args:
      chdir: /opt/dictionary/web
  when: dict_clone is changed or dict_venv is changed
  register: dict_sync
  changed_when: '"Successfully installed" not in dict_sync.stdout'

# Manage database.

- name: Stat db
  ansible.builtin.stat:
      path: /opt/dictionary/web/var/db.sqlite3
  register: dict_db

- name: Migrate
  become: true
  become_user: peter
  ansible.builtin.command:
      cmd: /opt/dictionary/web/var/venv/bin/python manage.py migrate
  args:
      chdir: /opt/dictionary/web
  when: dict_clone is changed and dict_db.stat.exists
  register: dict_migrate
  changed_when: '"No migrations to apply" not in dict_migrate.stdout'


# Systemd service.

- name: Service file
  notify:
      - restart dictionary service
  ansible.builtin.template:
      src: service
      dest: /etc/systemd/system/dictionary.service
      mode: "0644"

- name: Service state
  ansible.builtin.systemd:
      name: dictionary.service
      enabled: true
      daemon-reload: true


# Handlers.

- name: Handlers
  ansible.builtin.meta: flush_handlers
